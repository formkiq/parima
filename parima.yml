AWSTemplateFormatVersion: 2010-09-09
Description: Parima v1.1.1 - Launch Your Website using AWS in Minutes (https://github.com/formkiq/parima)

Parameters:

  HostedZone:
    Type: String
    Description: Optional. Required for custom domains - see https://console.aws.amazon.com/route53/v2/HostedZones
    Default: ''
  DomainName:
    Type: String
    Description: Optional. Required for custom domain, e.g. www.yourcompany.com
    Default: ''
  WebsiteVersion:
    Type: String
    Description: Version website to deploy
    AllowedPattern: ".+"
    Default: "v1"

Conditions:
  HasCertificate: !And [!Not [ !Equals [ !Ref HostedZone, "" ]], !Not [ !Equals [ !Ref DomainName, "" ]]]
  NoCertificate: !Or [!Equals [ !Ref HostedZone, "" ], !Equals [ !Ref DomainName, "" ]]

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      Tags:
        - Key: "Application"
          Value: "Parima"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties: 
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement: 
        - 
          Action: 
            - "s3:GetObject"
          Effect: "Allow"
          Resource: 
            Fn::Join: 
              - ""
              - 
                -  !GetAtt S3Bucket.Arn
                - "/*"
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: NoCertificate
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt S3Bucket.RegionalDomainName
          Id: s3origin
          OriginPath: !Sub "/${WebsiteVersion}"
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 600
          MaxTTL: 600
          MinTTL: 0
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.1_2016
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: "Application"
          Value: "Parima"

  CloudFrontRoute53:
    Type: AWS::Route53::RecordSet
    Condition: HasCertificate
    Properties:
      Name: !Ref DomainName
      HostedZoneName: !Sub "${HostedZone}."
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontCertificateDistribution.DomainName

  CloudFrontCertificateDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - Certificate
    Condition: HasCertificate
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt S3Bucket.RegionalDomainName
          Id: s3origin
          OriginPath: !Sub "/${WebsiteVersion}"
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 600
          MaxTTL: 600
          MinTTL: 0
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Aliases:
        - !Ref DomainName
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
          AcmCertificateArn: !GetAtt Certificate.CertificateArn
      Tags:
        - Key: "Application"
          Value: "Parima"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront for Parima ${S3Bucket}'

  # Create an IAM user with Access Keys to enable automated deployment of the website to this bucket
  PublishUser:
    Type: 'AWS::IAM::User'

  PublishGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
      - PolicyName: !Sub 'publish-to-${S3Bucket}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource:
            - !Sub 'arn:aws:s3:::${S3Bucket}'            
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListObjectsV2
            Resource:
            - !Sub 'arn:aws:s3:::${S3Bucket}'
            - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  AddPublishUserToPublishGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref PublishGroup
      Users:
      - !Ref PublishUser

  PublishCredentials:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref PublishUser

  DefaultSiteResource:
    Type: Custom::DefaultSite
    Properties:
      ServiceToken: !GetAtt DefaultSiteLambda.Arn

  DefaultSiteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListObjectsV2
            Resource:
            - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'

  DefaultSiteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Timeout: '300'
      Handler: index.handler
      Role: !GetAtt DefaultSiteLambdaRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          WEBSITE_VERSION: !Ref WebsiteVersion
      Code:
        ZipFile: |
          const AWS=require("aws-sdk"),https=require("https"),fs=require("fs");var s3=new AWS.S3({apiVersion:"2006-03-01"});async function upload(e){const t=e.split("/").pop();return new Promise((e,s)=>{console.log("Uploading "+t+" to "+process.env.S3_BUCKET);let o=getContentTypeByFile(t),n={Bucket:process.env.S3_BUCKET,Key:process.env.WEBSITE_VERSION+"/"+t,Body:fs.createReadStream("/tmp/"+t),ContentType:o};s3.putObject(n,function(s,o){s?(console.log(s),e(s)):e(t)})})}async function download(e){const t=e.split("/").pop(),s=fs.createWriteStream("/tmp/"+t);return new Promise((t,o)=>{https.get(e,e=>{200===e.statusCode?e.pipe(s):(s.close(),t(`Server responded with ${e.statusCode}: ${e.statusMessage}`))}).on("error",e=>{s.close(),t(e.message)}),s.on("finish",()=>{console.log("downloaded "+e),t("downloaded "+e)})})}async function sendResponse(e,t,s,o){var n=require("https"),r=require("url"),a=JSON.stringify({Status:s,Reason:"See the details in CloudWatch Log Stream: "+t.logStreamName,PhysicalResourceId:e.StackId+"-"+e.LogicalResourceId,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,Data:o}),i=r.parse(e.ResponseURL),p={hostname:i.hostname,port:443,path:i.path,method:"PUT",headers:{"content-type":"","content-length":a.length}};return new Promise(function(e,t){var s=n.request(p,t=>{t.setEncoding("utf8");let s="";t.on("data",e=>{s+=e}),t.on("end",()=>{e([s,t.statusCode,t.headers])})}).on("error",t=>{JSON.stringify(t);e([{message:"Unable to send message"},502,null])}).on("timeout",()=>{e([{message:"Request has timed out"},502,null])});s.write(a),s.end()})}function getContentTypeByFile(e){var t="application/octet-stream",s=e.toLowerCase();return s.indexOf(".html")>=0?t="text/html":s.indexOf(".css")>=0?t="text/css":s.indexOf(".json")>=0?t="application/json":s.indexOf(".js")>=0?t="application/x-javascript":s.indexOf(".png")>=0?t="image/png":s.indexOf(".jpg")>=0&&(t="image/jpg"),t}module.exports.handler=(async(e,t)=>{var s=[];const o=["https://raw.githubusercontent.com/formkiq/parima/master/placeholder/index.html","https://raw.githubusercontent.com/formkiq/parima/master/placeholder/parima.png","https://raw.githubusercontent.com/formkiq/parima/master/placeholder/favicon.ico"];if(null!=e.RequestType){if("Create"===e.RequestType){for(let e of o)s.push(download(e));return Promise.all(s).then(()=>{var e=[];for(let t of o)e.push(upload(t));return Promise.all(e)}).then(()=>sendResponse(e,t,"SUCCESS",{})).catch(s=>(console.log("error "+s),sendResponse(e,t,"FAILED")))}return sendResponse(e,t,"SUCCESS",{})}});

  Certificate:
    Type: Custom::Certificate
    Condition: HasCertificate
    Properties:
      ServiceToken: !GetAtt CertificateLambda.Arn
      Region: us-east-1
      OutputParameter: Certificate
      DomainName: !Ref DomainName
      HostedZoneName: !Ref HostedZone
      StackName: !Ref 'AWS::StackName'

  CertificateLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasCertificate
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - acm:DeleteCertificate
            - acm:RequestCertificate
            - acm:AddTagsToCertificate
            - acm:DescribeCertificate    
            - cloudformation:DescribeStacks        
            - route53:ChangeResourceRecordSets
            - route53:ListHostedZonesByName
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'

  CertificateLambda:
    Type: AWS::Lambda::Function
    Condition: HasCertificate
    Properties:
      Runtime: nodejs12.x
      Timeout: '300'
      Handler: index.handler
      Role: !GetAtt CertificateLambdaRole.Arn
      Code:
        ZipFile: |
          const AWS=require("aws-sdk");var acm=new AWS.ACM,route53=new AWS.Route53,cloudformation=new AWS.CloudFormation;const wait=e=>new Promise(t=>setTimeout(t,e));async function findHostedZoneId(e){return new Promise((t,r)=>{var a={DNSName:e};route53.listHostedZonesByName(a,function(e,a){e?r(e):t(a.HostedZones[0].Id)})})}async function updateRoute53Retry(e,t,r=10,a=1e4){let i=await findHostedZoneId(e);console.log("using hosted zone "+i);try{let o=await describeCertificate(t);return await updateRoute53(i,o),t}catch(i){return await wait(a),0===r?Promise.reject("Maximum retries exceeded!"):updateRoute53Retry(e,t,--r,a)}}async function updateRoute53(e,t){var r=[];for(let i of t.Certificate.DomainValidationOptions)if(i.ResourceRecord&&i.ResourceRecord.Name){var a={ChangeBatch:{Changes:[{Action:"UPSERT",ResourceRecordSet:{Name:i.ResourceRecord.Name,ResourceRecords:[{Value:i.ResourceRecord.Value}],TTL:60,Type:i.ResourceRecord.Type}}]},HostedZoneId:e};r.push(route53.changeResourceRecordSets(a).promise())}return Promise.all(r)}async function waitForValidation(e){return acm.waitFor("certificateValidated",{CertificateArn:e}).promise()}async function findCertificateArn(e,t){var r={StackName:e};return new Promise((e,a)=>{cloudformation.describeStacks(r,function(r,i){if(r)a(r);else{var o="";for(let e of i.Stacks[0].Outputs)e.OutputKey==t&&(o=e.OutputValue);""!=o?e(o):a(o)}})})}async function deleteCertificateRetry(e,t=30,r=1e4){try{return await deleteCertificate(e)}catch(a){return await wait(r),0===t?Promise.reject("Maximum retries exceeded!"):deleteCertificateRetry(e,--t,r)}}async function deleteCertificate(e){return console.log("deleting certificate "+e),acm.deleteCertificate({CertificateArn:e}).promise()}async function describeCertificate(e){return acm.describeCertificate({CertificateArn:e}).promise()}async function createCertificate(e,t){var r={DomainName:t,DomainValidationOptions:[{DomainName:t,ValidationDomain:e}],SubjectAlternativeNames:["*."+t],Tags:[{Key:"Application",Value:"Parima"}],ValidationMethod:"DNS"};return acm.requestCertificate(r).promise()}async function sendResponse(e,t,r,a){var i=require("https"),o=require("url"),n=JSON.stringify({Status:r,Reason:"See the details in CloudWatch Log Stream: "+t.logStreamName,PhysicalResourceId:e.StackId+"-"+e.LogicalResourceId,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,Data:a}),s=o.parse(e.ResponseURL),c={hostname:s.hostname,port:443,path:s.path,method:"PUT",headers:{"content-type":"","content-length":n.length}};return new Promise(function(e,t){var r=i.request(c,t=>{t.setEncoding("utf8");let r="";t.on("data",e=>{r+=e}),t.on("end",()=>{e([r,t.statusCode,t.headers])})}).on("error",t=>{JSON.stringify(t);e([{message:"Unable to send message"},502,null])}).on("timeout",()=>{e([{message:"Request has timed out"},502,null])});r.write(n),r.end()})}module.exports.handler=(async(e,t)=>{if(console.log(JSON.stringify(e)),null!=e.RequestType){let r=e.ResourceProperties.Region;if(null!=r&&(acm=new AWS.ACM({region:r}),console.log("using region: "+r)),"Create"===e.RequestType){let r=e.ResourceProperties.DomainName,a=e.ResourceProperties.HostedZoneName;return createCertificate(a,r).then(e=>(console.log("adding certificate verification DNS entries"),updateRoute53Retry(a,e.CertificateArn))).then(e=>(console.log("waiting DNS to be updated so certificate can be validated"),waitForValidation(e))).then(r=>(console.log("certificate has been validated"),sendResponse(e,t,"SUCCESS",{CertificateArn:r.Certificate.CertificateArn}))).catch(r=>(console.log(r),sendResponse(e,t,"FAILED")))}if("Delete"===e.RequestType){return findCertificateArn(e.ResourceProperties.StackName,e.ResourceProperties.OutputParameter).then(e=>deleteCertificateRetry(e)).then(r=>sendResponse(e,t,"SUCCESS",{})).catch(r=>(console.log(r),sendResponse(e,t,"FAILED")))}if("Update"===e.RequestType){return findCertificateArn(e.ResourceProperties.StackName,e.ResourceProperties.OutputParameter).then(r=>sendResponse(e,t,"SUCCESS",{CertificateArn:r}))}return sendResponse(e,t,"FAILED")}});

Outputs:
  Certificate:
    Condition: HasCertificate
    Description: 'Certificate'
    Value: !GetAtt Certificate.CertificateArn
  AccessKeyId:
    Description: 'S3 Access Key'
    Value: !Ref PublishCredentials
  AccessKeySecret:
    Description: 'S3 Secret Key'
    Value: !GetAtt PublishCredentials.SecretAccessKey
  WebsiteUrl:
    Description: 'Website Url'
    Value: !If [HasCertificate, !Sub "https://${DomainName}", !Sub "https://${CloudFrontDistribution.DomainName}"]
  S3Bucket:
    Description: 'S3 Bucket'
    Value: !Ref S3Bucket
  SyncCommand:
    Description: 'Sync Current Directory to S3'
    Value: !Sub "aws s3 sync . s3://${S3Bucket}/${WebsiteVersion}"    